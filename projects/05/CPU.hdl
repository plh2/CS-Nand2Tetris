// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])     // 输入值
        instruction[16], // Instruction for execution                   // 指令
        reset;           // Signals whether to re-start the current     // 是否重启
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output                              // 输出值
        writeM,          // Write to M?                                 // 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // A-Instruction
    Not(in=instruction[15], out=isA);
    ARegister(in=instruction[1..15], load=isA, out=A);
    // A-Instruction
    
    // C-Instruction
    // instruction[12]
    DRegister(in=inM, load=true, out=D);
    Mux16(a=inM, b=A, sel=instruction[12], out=y);
    
    // ALU
    ALU(x=D, y=y, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, zr=isZero, ng=isNegative);
    // dest
    // instruction[5] -> A
    ARegister(in=ALUout, load=instruction[5], out=A);
    // instruction[4] -> D
    DRegister(in=ALUout, load=instruction[4], out=D);
    // instruction[3] -> M
    Mux16(a=inM, b=ALUout, sel=instruction[3], out=outM);
    Mux(a=false, b=true, sel=instruction[3], out=writeM);
    // jump
    DMux8Way(in=true, sel=instruction[0..2], a=isNoJump, b=isGET, c=isJEQ, d=isJGE, e=isJLT, f=isJNE, g=isJLE, h=isJMP);
    

    // reset
    PC(in=A, load=isJump, inc=true, reset=reset, out=pc);
}